   1              		.file	"test.c"
   2              	# GNU C11 (Ubuntu 5.2.1-22ubuntu2) version 5.2.1 20151010 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 5.2.1 20151010, GMP version 6.0.0, MPFR version 3.1.3, MPC version 1.0.
   4              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   5              	# options passed:  -imultiarch x86_64-linux-gnu test.c -mtune=generic
   6              	# -march=x86-64 -g -O0 -fverbose-asm -fstack-protector-strong -Wformat
   7              	# -Wformat-security
   8              	# options enabled:  -faggressive-loop-optimizations
   9              	# -fasynchronous-unwind-tables -fauto-inc-dec -fchkp-check-incomplete-type
  10              	# -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
  11              	# -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
  12              	# -fchkp-use-static-bounds -fchkp-use-static-const-bounds
  13              	# -fchkp-use-wrappers -fcommon -fdelete-null-pointer-checks
  14              	# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  15              	# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  16              	# -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  17              	# -fira-share-spill-slots -fivopts -fkeep-static-consts
  18              	# -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  19              	# -fmerge-debug-strings -fpeephole -fprefetch-loop-arrays
  20              	# -freg-struct-return -fsched-critical-path-heuristic
  21              	# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  22              	# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  23              	# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-fusion
  24              	# -fsemantic-interposition -fshow-column -fsigned-zeros
  25              	# -fsplit-ivs-in-unroller -fstack-protector-strong -fstdarg-opt
  26              	# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  27              	# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  28              	# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  29              	# -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  30              	# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
  31              	# -m128bit-long-double -m64 -m80387 -malign-stringops
  32              	# -mavx256-split-unaligned-load -mavx256-split-unaligned-store
  33              	# -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp
  34              	# -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse -msse2
  35              	# -mtls-direct-seg-refs -mvzeroupper
  36              	
  37              		.text
  38              	.Ltext0:
  39              		.globl	baz
  41              	baz:
  42              	.LFB2:
  43              		.file 1 "test.c"
   1:test.c        **** #include "../acme.h"
   2:test.c        **** 
   3:test.c        **** #include <setjmp.h>
   4:test.c        **** 
   5:test.c        **** typedef struct _block_ret {
   6:test.c        ****     thing t;
   7:test.c        ****     acme_int ret_type;
   8:test.c        **** } block_ret;
   9:test.c        **** 
  10:test.c        **** 
  11:test.c        **** block_ret baz(jmp_buf buf, thing t, acme_int i) {
  44              		.loc 1 11 0
  45              		.cfi_startproc
  46 0000 55       		pushq	%rbp	#
  47              		.cfi_def_cfa_offset 16
  48              		.cfi_offset 6, -16
  49 0001 4889E5   		movq	%rsp, %rbp	#,
  50              		.cfi_def_cfa_register 6
  51 0004 48897DD8 		movq	%rdi, -40(%rbp)	# .result_ptr, .result_ptr
  52 0008 488975D0 		movq	%rsi, -48(%rbp)	# buf, buf
  53 000c 488955C0 		movq	%rdx, -64(%rbp)	# t, t
  54 0010 48894DC8 		movq	%rcx, -56(%rbp)	# t, t
  55 0014 4C8945B8 		movq	%r8, -72(%rbp)	# i, i
  12:test.c        ****     block_ret br;
  13:test.c        ****     br.t = t;
  56              		.loc 1 13 0
  57 0018 488B45C0 		movq	-64(%rbp), %rax	# t, tmp87
  58 001c 488B55C8 		movq	-56(%rbp), %rdx	# t,
  59 0020 488945E0 		movq	%rax, -32(%rbp)	# tmp87, br.t
  60 0024 488955E8 		movq	%rdx, -24(%rbp)	#, br.t
  14:test.c        ****     br.ret_type = i;
  61              		.loc 1 14 0
  62 0028 488B45B8 		movq	-72(%rbp), %rax	# i, tmp88
  63 002c 488945F0 		movq	%rax, -16(%rbp)	# tmp88, br.ret_type
  15:test.c        ****     return br;
  64              		.loc 1 15 0
  65 0030 488B45D8 		movq	-40(%rbp), %rax	# .result_ptr, tmp89
  66 0034 488B55E0 		movq	-32(%rbp), %rdx	# br, tmp90
  67 0038 488910   		movq	%rdx, (%rax)	# tmp90, <retval>
  68 003b 488B55E8 		movq	-24(%rbp), %rdx	# br, tmp91
  69 003f 48895008 		movq	%rdx, 8(%rax)	# tmp91, <retval>
  70 0043 488B55F0 		movq	-16(%rbp), %rdx	# br, tmp92
  71 0047 48895010 		movq	%rdx, 16(%rax)	# tmp92, <retval>
  16:test.c        **** }
  72              		.loc 1 16 0
  73 004b 488B45D8 		movq	-40(%rbp), %rax	# .result_ptr,
  74 004f 5D       		popq	%rbp	#
  75              		.cfi_def_cfa 7, 8
  76 0050 C3       		ret
  77              		.cfi_endproc
  78              	.LFE2:
  80              		.globl	foo
  82              	foo:
  83              	.LFB3:
  17:test.c        **** 
  18:test.c        **** block_ret foo(long long a, long long b, long long c, long long d, long long e, long long f, long lo
  84              		.loc 1 18 0
  85              		.cfi_startproc
  86 0051 55       		pushq	%rbp	#
  87              		.cfi_def_cfa_offset 16
  88              		.cfi_offset 6, -16
  89 0052 4889E5   		movq	%rsp, %rbp	#,
  90              		.cfi_def_cfa_register 6
  91 0055 4883EC50 		subq	$80, %rsp	#,
  92 0059 48897DD8 		movq	%rdi, -40(%rbp)	# .result_ptr, .result_ptr
  93 005d 488975D0 		movq	%rsi, -48(%rbp)	# a, a
  94 0061 488955C8 		movq	%rdx, -56(%rbp)	# b, b
  95 0065 48894DC0 		movq	%rcx, -64(%rbp)	# c, c
  96 0069 4C8945B8 		movq	%r8, -72(%rbp)	# d, d
  97 006d 4C894DB0 		movq	%r9, -80(%rbp)	# e, e
  19:test.c        ****     block_ret br;
  20:test.c        ****     br.t.u.i = 10;
  98              		.loc 1 20 0
  99 0071 48C745E0 		movq	$10, -32(%rbp)	#, br.t.u.i
  99      0A000000 
  21:test.c        ****     br.t.a_list = malloc(10);
 100              		.loc 1 21 0
 101 0079 BF0A0000 		movl	$10, %edi	#,
 101      00
 102 007e E8000000 		call	malloc	#
 102      00
 103 0083 488945E8 		movq	%rax, -24(%rbp)	# D.3572, br.t.a_list
  22:test.c        ****     br.ret_type = 1;
 104              		.loc 1 22 0
 105 0087 48C745F0 		movq	$1, -16(%rbp)	#, br.ret_type
 105      01000000 
  23:test.c        ****     return br;
 106              		.loc 1 23 0
 107 008f 488B45D8 		movq	-40(%rbp), %rax	# .result_ptr, tmp89
 108 0093 488B55E0 		movq	-32(%rbp), %rdx	# br, tmp90
 109 0097 488910   		movq	%rdx, (%rax)	# tmp90, <retval>
 110 009a 488B55E8 		movq	-24(%rbp), %rdx	# br, tmp91
 111 009e 48895008 		movq	%rdx, 8(%rax)	# tmp91, <retval>
 112 00a2 488B55F0 		movq	-16(%rbp), %rdx	# br, tmp92
 113 00a6 48895010 		movq	%rdx, 16(%rax)	# tmp92, <retval>
  24:test.c        **** }
 114              		.loc 1 24 0
 115 00aa 488B45D8 		movq	-40(%rbp), %rax	# .result_ptr,
 116 00ae C9       		leave
 117              		.cfi_def_cfa 7, 8
 118 00af C3       		ret
 119              		.cfi_endproc
 120              	.LFE3:
 122              		.globl	test
 124              	test:
 125              	.LFB4:
  25:test.c        **** 
  26:test.c        **** thing test(thing r) {
 126              		.loc 1 26 0
 127              		.cfi_startproc
 128 00b0 55       		pushq	%rbp	#
 129              		.cfi_def_cfa_offset 16
 130              		.cfi_offset 6, -16
 131 00b1 4889E5   		movq	%rsp, %rbp	#,
 132              		.cfi_def_cfa_register 6
 133 00b4 4883EC40 		subq	$64, %rsp	#,
 134 00b8 4889F8   		movq	%rdi, %rax	# r, tmp91
 135 00bb 4889F1   		movq	%rsi, %rcx	# r, tmp92
 136 00be 4889CA   		movq	%rcx, %rdx	# tmp92,
 137 00c1 488945C0 		movq	%rax, -64(%rbp)	# tmp90, r
 138 00c5 488955C8 		movq	%rdx, -56(%rbp)	#, r
 139              		.loc 1 26 0
 140 00c9 64488B04 		movq	%fs:40, %rax	#, tmp96
 140      25280000 
 140      00
 141 00d2 488945F8 		movq	%rax, -8(%rbp)	# tmp96, D.3575
 142 00d6 31C0     		xorl	%eax, %eax	# tmp96
  27:test.c        ****     block_ret br;
  28:test.c        ****     br = foo(1,2,3,4,5,6,7,8,9);
 143              		.loc 1 28 0
 144 00d8 488D45E0 		leaq	-32(%rbp), %rax	#, tmp93
 145 00dc 6A09     		pushq	$9	#
 146 00de 6A08     		pushq	$8	#
 147 00e0 6A07     		pushq	$7	#
 148 00e2 6A06     		pushq	$6	#
 149 00e4 41B90500 		movl	$5, %r9d	#,
 149      0000
 150 00ea 41B80400 		movl	$4, %r8d	#,
 150      0000
 151 00f0 B9030000 		movl	$3, %ecx	#,
 151      00
 152 00f5 BA020000 		movl	$2, %edx	#,
 152      00
 153 00fa BE010000 		movl	$1, %esi	#,
 153      00
 154 00ff 4889C7   		movq	%rax, %rdi	# tmp93,
 155 0102 E8000000 		call	foo	#
 155      00
 156 0107 4883C420 		addq	$32, %rsp	#,
  29:test.c        ****     thing t;
  30:test.c        ****     if(br.ret_type == 0) {
 157              		.loc 1 30 0
 158 010b 488B45F0 		movq	-16(%rbp), %rax	# br.ret_type, D.3574
 159 010f 4885C0   		testq	%rax, %rax	# D.3574
 160 0112 7512     		jne	.L6	#,
  31:test.c        ****         t = br.t;
 161              		.loc 1 31 0
 162 0114 488B45E0 		movq	-32(%rbp), %rax	# br.t, tmp94
 163 0118 488B55E8 		movq	-24(%rbp), %rdx	# br.t,
 164 011c 488945D0 		movq	%rax, -48(%rbp)	# tmp94, t
 165 0120 488955D8 		movq	%rdx, -40(%rbp)	#, t
 166 0124 EB10     		jmp	.L7	#
 167              	.L6:
  32:test.c        ****     }
  33:test.c        ****     else {
  34:test.c        ****         t = (thing){.a_list = NULL};
 168              		.loc 1 34 0
 169 0126 48C745D0 		movq	$0, -48(%rbp)	#, t
 169      00000000 
 170 012e 48C745D8 		movq	$0, -40(%rbp)	#, t
 170      00000000 
 171              	.L7:
  35:test.c        ****     }
  36:test.c        ****     return(t);
 172              		.loc 1 36 0
 173 0136 488B45D0 		movq	-48(%rbp), %rax	# t, D.3565
 174 013a 488B55D8 		movq	-40(%rbp), %rdx	# t, D.3565
  37:test.c        **** }
 175              		.loc 1 37 0
 176 013e 488B75F8 		movq	-8(%rbp), %rsi	# D.3575, tmp97
 177 0142 64483334 		xorq	%fs:40, %rsi	#, tmp97
 177      25280000 
 177      00
 178 014b 7405     		je	.L9	#,
 179 014d E8000000 		call	__stack_chk_fail	#
 179      00
 180              	.L9:
 181 0152 C9       		leave
 182              		.cfi_def_cfa 7, 8
 183 0153 C3       		ret
 184              		.cfi_endproc
 185              	.LFE4:
 187              	.Letext0:
 188              		.file 2 "/usr/include/stdint.h"
 189              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 190              		.file 4 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 191              		.file 5 "../uthash/src/uthash.h"
 192              		.file 6 "../acme.h"
 193              		.file 7 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 194              		.file 8 "/usr/include/setjmp.h"
