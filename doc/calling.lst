   1              		.file	"calling.c"
   2              	# GNU C11 (Ubuntu 5.2.1-22ubuntu2) version 5.2.1 20151010 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 5.2.1 20151010, GMP version 6.0.0, MPFR version 3.1.3, MPC version 1.0.
   4              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   5              	# options passed:  -imultiarch x86_64-linux-gnu calling.c -mtune=generic
   6              	# -march=x86-64 -g -O0 -fverbose-asm -fstack-protector-strong -Wformat
   7              	# -Wformat-security
   8              	# options enabled:  -faggressive-loop-optimizations
   9              	# -fasynchronous-unwind-tables -fauto-inc-dec -fchkp-check-incomplete-type
  10              	# -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
  11              	# -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
  12              	# -fchkp-use-static-bounds -fchkp-use-static-const-bounds
  13              	# -fchkp-use-wrappers -fcommon -fdelete-null-pointer-checks
  14              	# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  15              	# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  16              	# -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  17              	# -fira-share-spill-slots -fivopts -fkeep-static-consts
  18              	# -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  19              	# -fmerge-debug-strings -fpeephole -fprefetch-loop-arrays
  20              	# -freg-struct-return -fsched-critical-path-heuristic
  21              	# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  22              	# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  23              	# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-fusion
  24              	# -fsemantic-interposition -fshow-column -fsigned-zeros
  25              	# -fsplit-ivs-in-unroller -fstack-protector-strong -fstdarg-opt
  26              	# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  27              	# -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  28              	# -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  29              	# -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  30              	# -funit-at-a-time -funwind-tables -fverbose-asm -fzero-initialized-in-bss
  31              	# -m128bit-long-double -m64 -m80387 -malign-stringops
  32              	# -mavx256-split-unaligned-load -mavx256-split-unaligned-store
  33              	# -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp
  34              	# -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse -msse2
  35              	# -mtls-direct-seg-refs -mvzeroupper
  36              	
  37              		.text
  38              	.Ltext0:
  39              		.globl	baz
  41              	baz:
  42              	.LFB2:
  43              		.file 1 "calling.c"
   1:calling.c     **** #include "../acme.h"
   2:calling.c     **** 
   3:calling.c     **** #include <setjmp.h>
   4:calling.c     **** 
   5:calling.c     **** struct _caller_env {
   6:calling.c     ****     __jmp_buf env;
   7:calling.c     ****     thing t;
   8:calling.c     **** };
   9:calling.c     **** typedef struct _caller_env caller_env[1];
  10:calling.c     **** 
  11:calling.c     **** typedef __jmp_buf block_env;
  12:calling.c     **** 
  13:calling.c     **** int64_t baz(caller_env c_env, thing t, int64_t i) {
  44              		.loc 1 13 0
  45              		.cfi_startproc
  46 0000 55       		pushq	%rbp	#
  47              		.cfi_def_cfa_offset 16
  48              		.cfi_offset 6, -16
  49 0001 4889E5   		movq	%rsp, %rbp	#,
  50              		.cfi_def_cfa_register 6
  51 0004 4883EC20 		subq	$32, %rsp	#,
  52 0008 48897DF8 		movq	%rdi, -8(%rbp)	# c_env, c_env
  53 000c 4889F0   		movq	%rsi, %rax	# t, tmp91
  54 000f 4889D6   		movq	%rdx, %rsi	# t, tmp92
  55 0012 4889F2   		movq	%rsi, %rdx	# tmp92,
  56 0015 488945E0 		movq	%rax, -32(%rbp)	# tmp90, t
  57 0019 488955E8 		movq	%rdx, -24(%rbp)	#, t
  58 001d 48894DF0 		movq	%rcx, -16(%rbp)	# i, i
  14:calling.c     ****     (*c_env).t.u.i = 7;
  59              		.loc 1 14 0
  60 0021 488B45F8 		movq	-8(%rbp), %rax	# c_env, tmp93
  61 0025 48C74040 		movq	$7, 64(%rax)	#, c_env_2(D)->t.u.i
  61      07000000 
  15:calling.c     ****     (*c_env).t.a_list = malloc(20);
  62              		.loc 1 15 0
  63 002d BF140000 		movl	$20, %edi	#,
  63      00
  64 0032 E8000000 		call	malloc	#
  64      00
  65 0037 4889C2   		movq	%rax, %rdx	# tmp94, D.3568
  66 003a 488B45F8 		movq	-8(%rbp), %rax	# c_env, tmp95
  67 003e 48895048 		movq	%rdx, 72(%rax)	# D.3568, c_env_2(D)->t.a_list
  16:calling.c     ****     return i;
  68              		.loc 1 16 0
  69 0042 488B45F0 		movq	-16(%rbp), %rax	# i, D.3569
  17:calling.c     **** }
  70              		.loc 1 17 0
  71 0046 C9       		leave
  72              		.cfi_def_cfa 7, 8
  73 0047 C3       		ret
  74              		.cfi_endproc
  75              	.LFE2:
  77              		.globl	foo
  79              	foo:
  80              	.LFB3:
  18:calling.c     **** 
  19:calling.c     **** int64_t foo(int64_t a, int64_t b, int64_t c, int64_t d, int64_t e, int64_t f, int64_t g, int64_t h,
  81              		.loc 1 19 0
  82              		.cfi_startproc
  83 0048 55       		pushq	%rbp	#
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 6, -16
  86 0049 4889E5   		movq	%rsp, %rbp	#,
  87              		.cfi_def_cfa_register 6
  88 004c 4881ECB0 		subq	$176, %rsp	#,
  88      000000
  89 0053 4889BD78 		movq	%rdi, -136(%rbp)	# a, a
  89      FFFFFF
  90 005a 4889B570 		movq	%rsi, -144(%rbp)	# b, b
  90      FFFFFF
  91 0061 48899568 		movq	%rdx, -152(%rbp)	# c, c
  91      FFFFFF
  92 0068 48898D60 		movq	%rcx, -160(%rbp)	# d, d
  92      FFFFFF
  93 006f 4C898558 		movq	%r8, -168(%rbp)	# e, e
  93      FFFFFF
  94 0076 4C898D50 		movq	%r9, -176(%rbp)	# f, f
  94      FFFFFF
  95              		.loc 1 19 0
  96 007d 64488B04 		movq	%fs:40, %rax	#, tmp97
  96      25280000 
  96      00
  97 0086 488945F8 		movq	%rax, -8(%rbp)	# tmp97, D.3572
  98 008a 31C0     		xorl	%eax, %eax	# tmp97
  20:calling.c     ****     int64_t j;
  21:calling.c     ****     caller_env c_env;
  22:calling.c     ****     thing t;
  23:calling.c     ****     t.u.i = 6;
  99              		.loc 1 23 0
 100 008c 48C74590 		movq	$6, -112(%rbp)	#, t.u.i
 100      06000000 
  24:calling.c     ****     t.a_list = malloc(10);
 101              		.loc 1 24 0
 102 0094 BF0A0000 		movl	$10, %edi	#,
 102      00
 103 0099 E8000000 		call	malloc	#
 103      00
 104 009e 48894598 		movq	%rax, -104(%rbp)	# D.3570, t.a_list
  25:calling.c     ****     j = baz(c_env, t, j);
 105              		.loc 1 25 0
 106 00a2 488B4D88 		movq	-120(%rbp), %rcx	# j, tmp91
 107 00a6 488B7590 		movq	-112(%rbp), %rsi	# t, tmp92
 108 00aa 488B5598 		movq	-104(%rbp), %rdx	# t, tmp93
 109 00ae 488D45A0 		leaq	-96(%rbp), %rax	#, tmp94
 110 00b2 4889C7   		movq	%rax, %rdi	# tmp94,
 111 00b5 E8000000 		call	baz	#
 111      00
 112 00ba 48894588 		movq	%rax, -120(%rbp)	# tmp95, j
  26:calling.c     ****     return j;
 113              		.loc 1 26 0
 114 00be 488B4588 		movq	-120(%rbp), %rax	# j, D.3571
  27:calling.c     **** }
 115              		.loc 1 27 0
 116 00c2 488B7DF8 		movq	-8(%rbp), %rdi	# D.3572, tmp98
 117 00c6 6448333C 		xorq	%fs:40, %rdi	#, tmp98
 117      25280000 
 117      00
 118 00cf 7405     		je	.L5	#,
 119 00d1 E8000000 		call	__stack_chk_fail	#
 119      00
 120              	.L5:
 121 00d6 C9       		leave
 122              		.cfi_def_cfa 7, 8
 123 00d7 C3       		ret
 124              		.cfi_endproc
 125              	.LFE3:
 127              		.globl	test
 129              	test:
 130              	.LFB4:
  28:calling.c     **** 
  29:calling.c     **** thing test(thing r) {
 131              		.loc 1 29 0
 132              		.cfi_startproc
 133 00d8 55       		pushq	%rbp	#
 134              		.cfi_def_cfa_offset 16
 135              		.cfi_offset 6, -16
 136 00d9 4889E5   		movq	%rsp, %rbp	#,
 137              		.cfi_def_cfa_register 6
 138 00dc 4883EC30 		subq	$48, %rsp	#,
 139 00e0 4889F8   		movq	%rdi, %rax	# r, tmp90
 140 00e3 4889F1   		movq	%rsi, %rcx	# r, tmp91
 141 00e6 4889CA   		movq	%rcx, %rdx	# tmp91,
 142 00e9 488945D0 		movq	%rax, -48(%rbp)	# tmp89, r
 143 00ed 488955D8 		movq	%rdx, -40(%rbp)	#, r
  30:calling.c     ****     int64_t k;
  31:calling.c     ****     k = foo(1,2,3,4,5,6,7,8,9);
 144              		.loc 1 31 0
 145 00f1 4883EC08 		subq	$8, %rsp	#,
 146 00f5 6A09     		pushq	$9	#
 147 00f7 6A08     		pushq	$8	#
 148 00f9 6A07     		pushq	$7	#
 149 00fb 41B90600 		movl	$6, %r9d	#,
 149      0000
 150 0101 41B80500 		movl	$5, %r8d	#,
 150      0000
 151 0107 B9040000 		movl	$4, %ecx	#,
 151      00
 152 010c BA030000 		movl	$3, %edx	#,
 152      00
 153 0111 BE020000 		movl	$2, %esi	#,
 153      00
 154 0116 BF010000 		movl	$1, %edi	#,
 154      00
 155 011b E8000000 		call	foo	#
 155      00
 156 0120 4883C420 		addq	$32, %rsp	#,
 157 0124 488945E8 		movq	%rax, -24(%rbp)	# tmp92, k
  32:calling.c     ****     thing t;
  33:calling.c     ****     t.u.i = k;
 158              		.loc 1 33 0
 159 0128 488B45E8 		movq	-24(%rbp), %rax	# k, tmp93
 160 012c 488945F0 		movq	%rax, -16(%rbp)	# tmp93, t.u.i
  34:calling.c     ****     return(t);
 161              		.loc 1 34 0
 162 0130 488B45F0 		movq	-16(%rbp), %rax	# t, D.3562
 163 0134 488B55F8 		movq	-8(%rbp), %rdx	# t, D.3562
  35:calling.c     **** }
 164              		.loc 1 35 0
 165 0138 C9       		leave
 166              		.cfi_def_cfa 7, 8
 167 0139 C3       		ret
 168              		.cfi_endproc
 169              	.LFE4:
 171              	.Letext0:
 172              		.file 2 "/usr/include/stdint.h"
 173              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 174              		.file 4 "../uthash/src/uthash.h"
 175              		.file 5 "../acme.h"
 176              		.file 6 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
