   1              		.file	"calling.c"
   2              	# GNU C11 (Ubuntu 5.2.1-22ubuntu2) version 5.2.1 20151010 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 5.2.1 20151010, GMP version 6.0.0, MPFR version 3.1.3, MPC version 1.0.
   4              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   5              	# options passed:  -imultiarch x86_64-linux-gnu calling.c -mtune=generic
   6              	# -march=x86-64 -g -O9 -fverbose-asm -fstack-protector-strong -Wformat
   7              	# -Wformat-security
   8              	# options enabled:  -faggressive-loop-optimizations -falign-labels
   9              	# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg
  10              	# -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  11              	# -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  12              	# -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  13              	# -fchkp-use-static-const-bounds -fchkp-use-wrappers
  14              	# -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  15              	# -fcrossjumping -fcse-follow-jumps -fdefer-pop
  16              	# -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  17              	# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  18              	# -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
  19              	# -fgcse-after-reload -fgcse-lm -fgnu-runtime -fgnu-unique
  20              	# -fguess-branch-probability -fhoist-adjacent-loads -fident -fif-conversion
  21              	# -fif-conversion2 -findirect-inlining -finline -finline-atomics
  22              	# -finline-functions -finline-functions-called-once
  23              	# -finline-small-functions -fipa-cp -fipa-cp-alignment -fipa-cp-clone
  24              	# -fipa-icf -fipa-icf-functions -fipa-icf-variables -fipa-profile
  25              	# -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra -fira-hoist-pressure
  26              	# -fira-share-save-slots -fira-share-spill-slots
  27              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  28              	# -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  29              	# -fmath-errno -fmerge-constants -fmerge-debug-strings
  30              	# -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  31              	# -foptimize-strlen -fpartial-inlining -fpeephole -fpeephole2
  32              	# -fpredictive-commoning -fprefetch-loop-arrays -free -freg-struct-return
  33              	# -freorder-blocks -freorder-blocks-and-partition -freorder-functions
  34              	# -frerun-cse-after-loop -fsched-critical-path-heuristic
  35              	# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  36              	# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  37              	# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-fusion
  38              	# -fschedule-insns2 -fsemantic-interposition -fshow-column -fshrink-wrap
  39              	# -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt
  40              	# -fstack-protector-strong -fstdarg-opt -fstrict-aliasing -fstrict-overflow
  41              	# -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  42              	# -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
  43              	# -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
  44              	# -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
  45              	# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  46              	# -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  47              	# -ftree-loop-optimize -ftree-loop-vectorize -ftree-parallelize-loops=
  48              	# -ftree-partial-pre -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc
  49              	# -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize -ftree-slsr -ftree-sra
  50              	# -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  51              	# -funit-at-a-time -funswitch-loops -funwind-tables -fvar-tracking
  52              	# -fvar-tracking-assignments -fverbose-asm -fzero-initialized-in-bss
  53              	# -m128bit-long-double -m64 -m80387 -malign-stringops
  54              	# -mavx256-split-unaligned-load -mavx256-split-unaligned-store
  55              	# -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp
  56              	# -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse -msse2
  57              	# -mtls-direct-seg-refs -mvzeroupper
  58              	
  59              		.text
  60              	.Ltext0:
  61              		.section	.text.unlikely,"ax",@progbits
  62              	.LCOLDB0:
  63              		.text
  64              	.LHOTB0:
  65              		.p2align 4,,15
  66              		.section	.text.unlikely
  67              	.Ltext_cold0:
  68              		.text
  69              		.globl	baz
  71              	baz:
  72              	.LFB64:
  73              		.file 1 "calling.c"
   1:calling.c     **** #include "../acme.h"
   2:calling.c     **** 
   3:calling.c     **** #include <setjmp.h>
   4:calling.c     **** 
   5:calling.c     **** struct _caller_env {
   6:calling.c     ****     __jmp_buf env;
   7:calling.c     ****     thing t;
   8:calling.c     **** };
   9:calling.c     **** typedef struct _caller_env caller_env[1];
  10:calling.c     **** 
  11:calling.c     **** typedef __jmp_buf block_env;
  12:calling.c     **** 
  13:calling.c     **** int64_t baz(caller_env c_env, thing t, int64_t i) {
  74              		.loc 1 13 0
  75              		.cfi_startproc
  76              	.LVL0:
  77 0000 55       		pushq	%rbp	#
  78              		.cfi_def_cfa_offset 16
  79              		.cfi_offset 6, -16
  80 0001 53       		pushq	%rbx	#
  81              		.cfi_def_cfa_offset 24
  82              		.cfi_offset 3, -24
  83 0002 4889FB   		movq	%rdi, %rbx	# c_env, c_env
  84 0005 4889CD   		movq	%rcx, %rbp	# i, i
  85 0008 4883EC08 		subq	$8, %rsp	#,
  86              		.cfi_def_cfa_offset 32
  14:calling.c     ****     (*c_env).t.u.i = 7;
  87              		.loc 1 14 0
  88 000c 48C74740 		movq	$7, 64(%rdi)	#, c_env_2(D)->t.u.i
  88      07000000 
  15:calling.c     ****     (*c_env).t.a_list = malloc(20);
  89              		.loc 1 15 0
  90 0014 BF140000 		movl	$20, %edi	#,
  90      00
  91              	.LVL1:
  92 0019 E8000000 		call	malloc	#
  92      00
  93              	.LVL2:
  94 001e 48894348 		movq	%rax, 72(%rbx)	# tmp95, c_env_2(D)->t.a_list
  16:calling.c     ****     return i;
  17:calling.c     **** }
  95              		.loc 1 17 0
  96 0022 4883C408 		addq	$8, %rsp	#,
  97              		.cfi_def_cfa_offset 24
  98 0026 4889E8   		movq	%rbp, %rax	# i,
  99 0029 5B       		popq	%rbx	#
 100              		.cfi_def_cfa_offset 16
 101              	.LVL3:
 102 002a 5D       		popq	%rbp	#
 103              		.cfi_def_cfa_offset 8
 104              	.LVL4:
 105 002b C3       		ret
 106              		.cfi_endproc
 107              	.LFE64:
 109              		.section	.text.unlikely
 110              	.LCOLDE0:
 111              		.text
 112              	.LHOTE0:
 113              		.section	.text.unlikely
 114              	.LCOLDB1:
 115              		.text
 116              	.LHOTB1:
 117 002c 0F1F4000 		.p2align 4,,15
 118              		.globl	foo
 120              	foo:
 121              	.LFB65:
  18:calling.c     **** 
  19:calling.c     **** int64_t foo(int64_t a, int64_t b, int64_t c, int64_t d, int64_t e, int64_t f, int64_t g, int64_t h,
 122              		.loc 1 19 0
 123              		.cfi_startproc
 124              	.LVL5:
  20:calling.c     ****     int64_t j;
  21:calling.c     ****     caller_env c_env;
  22:calling.c     ****     thing t;
  23:calling.c     ****     t.u.i = 6;
  24:calling.c     ****     t.a_list = malloc(10);
  25:calling.c     ****     j = baz(c_env, t, j);
  26:calling.c     ****     return j;
  27:calling.c     **** }
 125              		.loc 1 27 0
 126 0030 31C0     		xorl	%eax, %eax	#
 127 0032 C3       		ret
 128              		.cfi_endproc
 129              	.LFE65:
 131              		.section	.text.unlikely
 132              	.LCOLDE1:
 133              		.text
 134              	.LHOTE1:
 135              		.section	.text.unlikely
 136              	.LCOLDB2:
 137              		.text
 138              	.LHOTB2:
 139 0033 0F1F0066 		.p2align 4,,15
 139      2E0F1F84 
 139      00000000 
 139      00
 140              		.globl	test
 142              	test:
 143              	.LFB66:
  28:calling.c     **** 
  29:calling.c     **** thing test(thing r) {
 144              		.loc 1 29 0
 145              		.cfi_startproc
 146              	.LVL6:
  30:calling.c     ****     int64_t k;
  31:calling.c     ****     k = foo(1,2,3,4,5,6,7,8,9);
  32:calling.c     ****     thing t;
  33:calling.c     ****     t.u.i = k;
  34:calling.c     ****     return(t);
  35:calling.c     **** }
 147              		.loc 1 35 0
 148 0040 31C0     		xorl	%eax, %eax	#
 149 0042 31D2     		xorl	%edx, %edx	#
 150 0044 C3       		ret
 151              		.cfi_endproc
 152              	.LFE66:
 154              		.section	.text.unlikely
 155              	.LCOLDE2:
 156              		.text
 157              	.LHOTE2:
 158              	.Letext0:
 159              		.section	.text.unlikely
 160              	.Letext_cold0:
 161              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 162              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 163              		.file 4 "/usr/include/libio.h"
 164              		.file 5 "/usr/include/stdint.h"
 165              		.file 6 "../uthash/src/uthash.h"
 166              		.file 7 "../acme.h"
 167              		.file 8 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 168              		.file 9 "/usr/include/stdio.h"
 169              		.file 10 "/usr/include/stdlib.h"
